import React, {Component} from 'react';import {    Alert,    Dimensions,    ListView,    ScrollView,    Image,    View,    StyleSheet,    Text,    Platform,    TouchableOpacity,    RefreshControl,    Animated,    Easing,    ToastAndroid,    Modal,    ActivityIndicator,} from 'react-native';import {connect} from 'react-redux';import Icon from 'react-native-vector-icons/FontAwesome';import PopupDialog,{ScaleAnimation,DefaultAnimation,SlideAnimation} from 'react-native-popup-dialog';import {getAccessToken,} from '../../action/UserActions';import {Toolbar,OPTION_SHOW,OPTION_NEVER,ACTION_ADD} from 'react-native-toolbar-wrapper'import ModalDropdown from 'react-native-modal-dropdown';import Ionicons from 'react-native-vector-icons/Ionicons';import AddVideo from './AddVideo'import {fetchNewsInfo,updateNewsInfo} from '../../action/NewsActions'import Config from '../../../config'import { IndicatorViewPager,PagerTitleIndicator } from 'rn-viewpager'import Proxy from '../../utils/Proxy';import VideoDetail from './VideoDetail'var {height, width} = Dimensions.get('window');class MyVideo extends Component {    goBack() {        const {navigator} = this.props;        if (navigator) {            navigator.pop();        }    }    _onRefresh() {        this.setState({ isRefreshing: true, fadeAnim: new Animated.Value(0) });        setTimeout(function () {            this.setState({                isRefreshing: false,            });            Animated.timing(          // Uses easing functions                this.state.fadeAnim,    // The value to drive                {                    toValue: 1,                    duration: 600,                    easing: Easing.bounce                },           // Configuration            ).start();        }.bind(this), 2000);        this.props.dispatch(fetchNewsInfo());    }    navigate2AddVideo()    {        const {navigator} =this.props;        if(navigator) {            navigator.push({                name: 'AddVideo',                component: AddVideo,                params: {                }            })        }    }    navigate2VideoDetail(video)    {        const {navigator} =this.props;        if(navigator) {            navigator.push({                name: 'VideoDetail',                component: VideoDetail,                params: {                    video:video                }            })        }    }    renderRow(rowData,sectionId,rowId){        //{id,videoname,type,author,brief,longbrief,browsecount,uploadTime,commentList,videoUrl}        return (            <View style={{width:width,height:240,flexDirection:'column',borderBottomWidth:1,borderColor:'#ddd',padding:5,paddingHorizontal:20,backgroundColor:'#fff'}}>                <View style={{flexDirection: 'row',height:30,width:width-40,justifyContent: 'center',alignItems: 'center'}}>                    <Text style={{flex:3,alignItems:'flex-start',color:'#333',fontSize:16}}>{rowData.videoname}</Text>                    <View style={{flex:1,justifyContent:'flex-end',alignItems:'center',flexDirection:'row'}}>                        <Ionicons name='md-eye' size={15} color="#aaa"/>                        <Text style={{color:'#aaa',fontSize:12,marginLeft:5}}>{rowData.browsecount}</Text>                    </View>                </View>                <View style={{flexDirection: 'row',height:30,width:width-40,justifyContent: 'center',alignItems: 'center'}}>                    <Text style={{flex:1,alignItems:'flex-start',color:'#666',fontSize:13}}>{rowData.brief}</Text>                </View>                <TouchableOpacity style={{flexDirection: 'row',height:140,width:width-40,justifyContent: 'center',alignItems: 'center'}}                                  onPress={()=>{                                      this.navigate2VideoDetail(rowData)                                  }}>                    <View style={{flex:1}}>                    <Image style={{flex:1,width:width-40}}                           source={require('../../../img/zhibo2.jpeg')}                           resizeMode="stretch"/>                    </View>                </TouchableOpacity>                <View style={{flexDirection: 'row',height:40,width:width-40,justifyContent: 'center',alignItems: 'center'}}>                    <View style={{flex:1,justifyContent:'flex-end',alignItems:'center',flexDirection:'row'}}>                        <Text style={{fontSize:12,color:'#999'}}>{rowData.author}</Text>                        <Text style={{fontSize:12,color:'#999',marginLeft:5}}>{rowData.uploadTime}</Text>                    </View>                </View>            </View>        );    }    constructor(props) {        super(props);        this.state = {            doingFetch: false,            isRefreshing: false,            fadeAnim: new Animated.Value(1),            bgColor: new Animated.Value(0),            //所有新闻            videos:[],            //视频            mp4:[],            //音频            mp3:[],        }    }    render() {        var mp4List=null        if(this.state.mp4 && this.state.mp4.length>0)        {            var ds1 = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});            mp4List=(                <ScrollView>                    <ListView                        automaticallyAdjustContentInsets={false}                        dataSource={ds1.cloneWithRows(this.state.mp4)}                        renderRow={this.renderRow.bind(this)}                    />                </ScrollView>            );        }        var mp3List=null        if(this.state.mp3&&this.state.mp3.length>0)        {            var ds2 = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});            mp3List=(                <ScrollView>                    <ListView                        automaticallyAdjustContentInsets={false}                        dataSource={ds2.cloneWithRows(this.state.mp3)}                        renderRow={this.renderRow.bind(this)}                    />                </ScrollView>            );        }        return (            <View style={{flex:1}}>                <Toolbar width={width} title="我的视频" navigator={this.props.navigator}                         actions={[{icon:ACTION_ADD,show:OPTION_SHOW}]}                         onPress={(i)=>{                             if(i==0){                                 this.navigate2AddVideo()                             }                         }}>                    {/*内容区*/}                    <View style={{flex:5,backgroundColor:'#eee'}}>                        <Animated.View style={{opacity: this.state.fadeAnim,height:height-150,paddingBottom:5,}}>                            <IndicatorViewPager                                style={{flex:1,flexDirection: 'column-reverse'}}                                indicator={this._renderTitleIndicator()}                                onPageScroll={this._onPageScroll.bind(this)}                            >                                {mp4List}                                {mp3List}                            </IndicatorViewPager>                        </Animated.View>                    </View>                </Toolbar>            </View>        );    }    _renderTitleIndicator () {        return (            <PagerTitleIndicator                style={styles.indicatorContainer}                trackScroll={true}                itemTextStyle={styles.indicatorText}                itemStyle={{width:width/2}}                selectedItemStyle={{width:width/2}}                selectedItemTextStyle={styles.indicatorSelectedText}                selectedBorderStyle={styles.selectedBorderStyle}                titles={['视频', '音频']}            />        )    }    _onPageScroll (scrollData) {        let {offset, position} = scrollData        if (position < 0 || position > 1) return    }    componentWillUnmount(){    }    componentDidMount(){        Proxy.postes({            url: Config.server + '/func/allow/fetchVideos',            headers: {                'Content-Type': 'application/json',            },            body: {            }        }).then((json)=>{            if(json.re==1)            {                var videos = json.data;                var mp3 = [];                var mp4 = [];                this.setState({videos:videos});                for(var i=0;i<videos.length;i++){                    if(videos[i].type==1){                        //视频                        mp4.push(videos[i]);                    }                    if(videos[i].type==2){                        //音频                        mp3.push(videos[i]);                    }                }                this.setState({mp3:mp3,mp4:mp4})            }            else {                if(json.re=-100){                    this.props.dispatch(getAccessToken(false))                }            }        })    }}var styles = StyleSheet.create({    container:{        flex:1,        backgroundColor:'transparent',    },    indicatorContainer: {        backgroundColor: '#66CDAA',        height: 48    },    indicatorText: {        fontSize: 14,        color: 0xFFFFFF99    },    indicatorSelectedText: {        fontSize: 14,        color: 0xFFFFFFFF    },    selectedBorderStyle: {        height: 3,        backgroundColor: 'white'    },    statusBar: {        height: 24,        backgroundColor: 0x00000044    },    toolbarContainer: {        height: 56,        backgroundColor: 0x00000020,        flexDirection: 'row',        alignItems: 'center',        paddingHorizontal: 16    },    backImg: {        width: 16,        height: 17    },    titleTxt: {        marginLeft: 36,        color: 'white',        fontSize: 20    }});module.exports = connect(state=>({        accessToken:state.user.accessToken,        personInfo:state.user.personInfo,    }))(MyVideo);